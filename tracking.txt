https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world
https://github.com/miguelgrinberg/microblog

export FLASK_APP=microblog.py
pip install python-dotenv


https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iv-database

workon flaskmegatutorial

export FLASK_APP=microblog.py

https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-v-user-logins
Now http://127.0.0.1:5000/login?next=%2F doesn't work properly

git config user.email "info@poly-edr.com"
git config user.name "polyedr"

export FLASK_APP=microblog.py
export FLASK_ENV=development
export ELASTICSEARCH_URL=http://localhost:9200
flask run

flask debug in browser:
export FLASK_DEBUG=1

large flask applications:
https://www.digitalocean.com/community/tutorials/how-to-structure-large-flask-applications
https://gist.github.com/cuibonobo/8696392
http://flask.pocoo.org/docs/0.12/patterns/packages/

export MAIL_SERVER=smtp.googlemail.com
export MAIL_PORT=587
export MAIL_USE_TLS=1
export MAIL_USERNAME=ivan.ishchukov@gmail.com
export MAIL_PASSWORD=lucio1984


https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-x-email-support



I also need a view function to handle this form:
@app.route('/reset_password_request', methods=['GET', 'POST'])
def reset_password_request():
    if current_user.is_authenticated:
        return redirect(url_for('index'))

applied to the templates:
{% block content %}
-->
{% block app_content %}

https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xi-facelift
Applying Bootstrap to the templates

https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xii-dates-and-times
Using Moment.js
Moment.js makes a moment class available to the browser. The first step to render a timestamp is to create an object of this class, passing the desired timestamp in ISO 8601 format. Here is an example:

3.12.2018
https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xiii-i18n-and-l10n

flask translate init en-gb

  File "/home/user/Desktop/Programming/Flask/flask-mega-tutorial/microblog/app/cli.py", line 33, in init
    raise RuntimeError('extract command failed')
RuntimeError: extract command failed

skipped the chapter content after: Using a Third-Party Translation Service
https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xiv-ajax

https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xv-a-better-application-structure
The creation of a blueprint is fairly similar to the creation of an application. This is done in the ___init__.py module of the blueprint package:

blueprint main
__init__.py

https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xvi-full-text-search
elastic doesnt't work at flask shell
Elasticsearch Configuration
Integrating Elasticsearch into the application is a great example of the power of Flask. This is a service and Python package that does not have anything to do with Flask, yet, I'm going to get a pretty good level of integration, starting from the configuration, which I'm going to write in the app.config dictionary from Flask:
this test doesn't work, too 
https://tryolabs.com/blog/2015/02/17/python-elasticsearch-first-steps/

5.12.2018
Elastic search
maybe interesting:
https://losst.ru/ispolzovanie-elasticsearch#_Elasticsearch_Ubuntu
https://www.elastic.co/guide/en/elasticsearch/reference/2.4/_installation.html
https://www.elastic.co/guide/en/elasticsearch/guide/current/running-elasticsearch.html
maybe interesting, follow this:
https://medium.freecodecamp.org/elasticsearch-with-django-the-easy-way-909375bc16cb
https://adw0rd.com/2015/12/16/django-elasticsearch/
maybe interesting:
https://xakep.ru/2015/06/11/elasticsearch-tutorial/
kibana:
https://www.linuxtechi.com/install-elk-stack-elasticsearch-logstash-kibana-centos7-rhel7/


wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.1.1.tar.gz
tar -xzf elasticsearch-5.1.1.tar.gz
./elasticsearch-5.1.1/bin/elasticsearch

elastic search:
https://www.elastic.co/blog/elasticsearch-6-5-0-released

skipped:
adding it to the .env file as follows:
ELASTICSEARCH_URL=http://localhost:9200











