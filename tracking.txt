https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world
https://github.com/miguelgrinberg/microblog

export FLASK_APP=microblog.py
pip install python-dotenv


https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iv-database

workon flaskmegatutorial

export FLASK_APP=microblog.py

https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-v-user-logins
Now http://127.0.0.1:5000/login?next=%2F doesn't work properly

git config user.email "info@poly-edr.com"
git config user.name "polyedr"

export FLASK_APP=microblog.py
export FLASK_ENV=development
export ELASTICSEARCH_URL=http://localhost:9200
flask run

flask debug in browser:
export FLASK_DEBUG=1

large flask applications:
https://www.digitalocean.com/community/tutorials/how-to-structure-large-flask-applications
https://gist.github.com/cuibonobo/8696392
http://flask.pocoo.org/docs/0.12/patterns/packages/

export MAIL_SERVER=smtp.googlemail.com
export MAIL_PORT=587
export MAIL_USE_TLS=1
export MAIL_USERNAME=ivan.ishchukov@gmail.com
export MAIL_PASSWORD=lucio1984


https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-x-email-support



I also need a view function to handle this form:
@app.route('/reset_password_request', methods=['GET', 'POST'])
def reset_password_request():
    if current_user.is_authenticated:
        return redirect(url_for('index'))

applied to the templates:
{% block content %}
-->
{% block app_content %}

https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xi-facelift
Applying Bootstrap to the templates

https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xii-dates-and-times
Using Moment.js
Moment.js makes a moment class available to the browser. The first step to render a timestamp is to create an object of this class, passing the desired timestamp in ISO 8601 format. Here is an example:

3.12.2018
https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xiii-i18n-and-l10n

flask translate init en-gb

  File "/home/user/Desktop/Programming/Flask/flask-mega-tutorial/microblog/app/cli.py", line 33, in init
    raise RuntimeError('extract command failed')
RuntimeError: extract command failed

skipped the chapter content after: Using a Third-Party Translation Service
https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xiv-ajax

https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xv-a-better-application-structure
The creation of a blueprint is fairly similar to the creation of an application. This is done in the ___init__.py module of the blueprint package:

blueprint main
__init__.py

https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xvi-full-text-search
elastic doesnt't work at flask shell
Elasticsearch Configuration
Integrating Elasticsearch into the application is a great example of the power of Flask. This is a service and Python package that does not have anything to do with Flask, yet, I'm going to get a pretty good level of integration, starting from the configuration, which I'm going to write in the app.config dictionary from Flask:
this test doesn't work, too 
https://tryolabs.com/blog/2015/02/17/python-elasticsearch-first-steps/

5.12.2018
Elastic search
maybe interesting:
https://losst.ru/ispolzovanie-elasticsearch#_Elasticsearch_Ubuntu
https://www.elastic.co/guide/en/elasticsearch/reference/2.4/_installation.html
https://www.elastic.co/guide/en/elasticsearch/guide/current/running-elasticsearch.html
maybe interesting, follow this:
https://medium.freecodecamp.org/elasticsearch-with-django-the-easy-way-909375bc16cb
https://adw0rd.com/2015/12/16/django-elasticsearch/
maybe interesting:
https://xakep.ru/2015/06/11/elasticsearch-tutorial/
kibana:
https://www.linuxtechi.com/install-elk-stack-elasticsearch-logstash-kibana-centos7-rhel7/


wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.1.1.tar.gz
tar -xzf elasticsearch-5.1.1.tar.gz
./elasticsearch-5.1.1/bin/elasticsearch

elastic search:
https://www.elastic.co/blog/elasticsearch-6-5-0-released

skipped:
adding it to the .env file as follows:




https://www.elastic.co/guide/en/elasticsearch/guide/current/data-in-data-out.html
https://www.elastic.co/blog/found-dive-into-elasticsearch-storage


export FLASK_ENV=development
export ELASTICSEARCH_URL=http://localhost:9200
flask run

8.12.2018
git pull
cd microblog
export FLASK_ENV=development
flask run

https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xvii-deployment-on-linux
ls ~/.ssh

Deploy on centos-vps droplet 207.154.192.213
https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys--2
ssh-keygen -t rsa
lucio1

SHA256:A0mC638Y6pxbTjry5MkQf2FXL4kTHErXNoT8JDtDMaw ishuk@linux-q7g7

ssh-copy-id admin@207.154.192.213

sudo vim /etc/ssh/sshd_config
uncomment
PermitRootLogin without-password
PasswordAuthentication no
sudo systemctl reload sshd.service
Now with keys.

at the droplet:
cd ~/environments
python -m venv microblogenv
source ./microblogenv/bin/activate

git clone https://github.com/miguelgrinberg/microblog
cd microblog
pip install gunicorn psycopg2-binary

about database:
DATABASE_URL="postgresql://username:password/wordcount_dev
https://realpython.com/flask-by-example-part-2-postgres-sqlalchemy-and-alembic/

SECRET_KEY=195857d145c74151b28578fee4849c49
MAIL_SERVER=localhost
MAIL_PORT=25
DATABASE_URL=postgresql://user_microblog:user_microblog_password2@localhost:3306/db_microblog
MS_TRANSLATOR_KEY=a51f43dc5a574f18b522f65fa5885d08

python3 -c "import uuid; print(uuid.uuid4().hex)"

MS Translator Key
Registration at Azure services
https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xiv-ajax

https://azure.microsoft.com/en-us/services/cognitive-services/translator-text-api/
https://portal.azure.com/

Grab your keys
Make an API call to this endpoint: https://api.cognitive.microsoft.com/sts/v1.0

name: translator
key1: a51f43dc5a574f18b522f65fa5885d08
key2: 9bed54f17fe248469361e10308293fc5

export FLASK_APP=microblog.py
add this command to the profile file:
~/.bashrc

create database db_microblog;
create user user_microblog password 'user_microblog_password2';
GRANT all ON DATABASE db_microblog.* TO user_microblog;

flask db upgrade

Setting Up Gunicorn and Supervisor

Below you can see the nginx configuration file for Microblog, which goes in /etc/nginx/sites-enabled/microblog:
https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-centos-7

How to specify domain name?
https://code.luasoftware.com/tutorials/flask/things-you-should-know-about-flask-server-name/
maybe at nginx:
https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-14-04

pwd certs
/home/admin/flask_microblog/microblog/certs


/etc/nginx/sites-available
sudo vim s0-n.ru.conf

sudo ln -s /etc/nginx/sites-available/s0-n.ru.conf /etc/nginx/sites-enabled

9.12.2018
https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-16-04
https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-16-04
https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-centos-7
https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-centos-7
https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xvii-deployment-on-linux

https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-16-04 Create a systemd Unit File
https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-16-04 Create a Gunicorn systemd Service File

NGINX configuration to test domain
https://nginx.org/ru/docs/beginners_guide.html

server {
    # listen on port 80 (http)
    listen 80;
    server_name electr0.ru www.electr0.ru;
    location / {
        # redirect any requests to the same URL but on https
        # return 301 https://$host$request_uri;
        root /home/admin/flask_microblog/microblog/app/static;

    }
}

https://tutorials.technology/tutorials/71-How-to-setup-Flask-with-gunicorn-and-nginx-with-examples.html

https://scaleyourcode.com/blog/article/21

At the centos-vps server /etc/nginx/conf.d configuration is active instead of sites-available and sites-enabled


Server names
https://nginx.org/ru/docs/http/server_names.html




server {
    # listen on port 80 (http)
    listen 80;
    server_name s0-n.ru www.s0-.n.ru;
    location / {
        # redirect any requests to the same URL but on https
        return 301 https://$host$request_uri;
    }
}
server {
    # listen on port 443 (https)
    listen 443 ssl;
    server_name s0-n.ru www.s0-.n.ru;

    # location of the self-signed SSL certificate
    ssl_certificate /home/admin/flask_microblog/microblog/certs/cert.pem;
    ssl_certificate_key /home/admin/flask_microblog/microblog/certs/key.pem;

    # write access and error logs to /var/log
    access_log /var/log/microblog_access.log;
    error_log /var/log/microblog_error.log;

    location / {
        # forward application requests to the gunicorn server
        proxy_pass http://localhost:8000;
        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location /static {
        # handle static files directly, without forwarding to the application
        alias /home/admin/flask_microblog/microblog/app/static;
        expires 30d;
    }
}


This works, too
gunicorn --bind 0.0.0.0:8000 wsgi:app

Now the deploy works, but with localhost option to bind only. An option with socket to bind doesn't work.


10.12.2018
Hosting on Heroku
https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xviii-deployment-on-heroku

at work computer first complete upgrade to tumbleweed is essential to unlock yast

skipped

now 
https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xix-deployment-on-docker-containers

sudo docker run --name microblog -d -p 8000:5000 --rm -e SECRET_KEY=f3cfe107fbd127361daa994eefdc9170 microblog:latest

docker with postgresql
https://hub.docker.com/_/postgres/
https://docs.docker.com/engine/examples/postgresql_service/

Adding a MySQL Container

PostrgeSQL container
https://medium.com/@lvthillo/connect-from-local-machine-to-postgresql-docker-container-f785f00461a7

docker run --name mysql -d -e MYSQL_RANDOM_ROOT_PASSWORD=yes \
    -e MYSQL_DATABASE=microblog -e MYSQL_USER=microblog \
    -e MYSQL_PASSWORD=<database-password> \
    mysql/mysql-server:5.7


docker run -d -p 5432:5432 --name my-postgres -e POSTGRES_PASSWORD=password1 microblog

sudo docker run --name my-postgres -d -e  POSTGRES_PASSWORD=password1 microblog



docker run --name microblog -d -p 8000:5000 --rm -e SECRET_KEY=f3cfe107fbd127361daa994eefdc9170 --link postgresql:dbserver -e DATABASE_URL=postgresql://microblog:password1@dbserver/microblog microblog:latest

sudo docker run --name microblog -d -p 8000:5000 --rm -e SECRET_KEY=f3cfe107fbd127361daa994eefdc9170 --link my-postgres:dbserver -e DATABASE_URL=my-postgres://microblog:password1@dbserver/microblog microblog:latest

Skipped:
To be able to access your account from the command line, you need to log in with the docker login command:

